{"version":3,"sources":["../../src/routes/auth.js"],"names":["express","require","router","Router","passport","bcrypt","User","post","req","res","next","body","username","password","length","status","json","message","findOne","then","found","salt","genSaltSync","hash","hashSync","create","login","dbUser","err","catch","authenticate","user","delete","logout","get","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst passport = require(\"passport\");\nconst bcrypt = require(\"bcrypt\");\nconst User = require(\"../models/User\");\n\n// signup route POST\nrouter.post(\"/signup\", (req, res, next) => {\n  const { username, password } = req.body;\n\n  if (!password || password.length < 8) {\n    return res\n      .status(400)\n      .json({ message: \"your password must be 8 characters min.\" });\n  }\n  if (!username || username.length < 4) {\n    return res\n      .status(400)\n      .json({ message: \"You must provide a username of 4 char. min.\" });\n  }\n\n  User.findOne({ username: username })\n    .then(found => {\n      if (found) {\n        return res\n          .status(400)\n          .json({ message: \"This username is already taken\" });\n      }\n\n      const salt = bcrypt.genSaltSync();\n      const hash = bcrypt.hashSync(password, salt);\n\n      return User.create({ username: username, password: hash }).then(\n        dbUser => {\n          req.login(dbUser, err => {\n            if (err) {\n              return res\n                .status(500)\n                .json({ message: \"error while creating user\" });\n            }\n          });\n          res.json(dbUser);\n        }\n      );\n    })\n    .catch(err => {\n      res.json(err);\n    });\n});\n\n//login route\nrouter.post(\"/login\", (req, res) => {\n  passport.authenticate(\"local\", (err, user) => {\n    if (err) {\n      return res.status(500).json({ message: \"Error while authenticating\" });\n    }\n    if (!user) {\n      return res.status(400).json({ message: \"Wrong credentials\" });\n    }\n    req.login(user, err => {\n      if (err) {\n        return res\n          .status(500)\n          .json({ message: \"Error while attempting to login\" });\n      }\n      return res.json(user);\n    });\n  })(req, res);\n});\n\n// DELETE /api/auth/logout\nrouter.delete(\"/logout\", (req, res) => {\n    req.logout();\n    res.json({ message: \"Successful logout\" });\n  });\n  \n  //check if the user has an active session\n  router.get(\"/loggedin\", (req, res) => {\n    res.json(req.user);\n  });\n\nmodule.exports = router;\n"]}